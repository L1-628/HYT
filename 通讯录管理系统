
//封装函数显示界面 如void showMenu()
//在main函数中调用封装好的函数
#include<iostream>
#include<string>
#define MAX 1000
using namespace std;

//设计联系人的结构体
struct Person
{
	//姓名
	string m_Name;
	//性别 1男 2女
	int m_Sex;
	//年龄
	int m_Age;
	//电话
	string m_Phone;
	//住址
	string m_Addr;
};

//设计通讯录的结构体
struct Addressbooks
{
	//通讯录中保存的联系人数组
	struct Person pesonArray[MAX];

	//通讯录中当前记录联系人的个数
	int m_Size;
};

//1、添加联系人
void addPerson(Addressbooks* abs)
{
	//判断通讯录是否已满，如果满了就不再添加
	if (abs->m_Size == MAX)
	{
		cout << "通讯录已满，无法添加!" << endl;
		return;
	}
	else
	{
		//添加具体联系人
		
		//姓名
		string name;
		cout << "请输入姓名：" ;
		cin >> name;
		abs->pesonArray[abs->m_Size].m_Name = name;
		//性别
		cout << "请输入性别："<<endl;
		cout << "  1 --- 男" << endl;
		cout << "  2 --- 女" << endl;
		int sex = 0;
		while (true) {
			cin >> sex;
			if (sex == 1 || sex == 2)
			{
				abs->pesonArray[abs->m_Size].m_Sex = sex;
				break;
			}
			cout << "输入有误，请重新输入" << endl;
		}
		
		//年龄
		cout << "请输入年龄：";
		int age = 0;
		cin >> age;
		abs->pesonArray[abs->m_Size].m_Age = age;
		//电话
		cout << "请输入联系电话：" ;
		string phone;
		cin >> phone;
		abs->pesonArray[abs->m_Size].m_Phone = phone;
		//住址
		cout << "请输入家庭住址：";
		string address;
		cin >> address;
		abs->pesonArray[abs->m_Size].m_Addr = address;
		//更新通讯录人数
		abs->m_Size++;
		cout << "添加成功" << endl; 
		system("pause");//请按任意键继续
		system("cls");//清屏操作
	}
}

//2、显示所有的联系人
void showPerson(Addressbooks* abs)
{
	//判断通讯录中人数是否为0，如果为0，提示记录为空
	//如果不是0显示记录的联系人信息
	if (abs->m_Size == 0) {
		cout << "当前记录为空" << endl;
	}
	else {
		for (int i = 0; i < abs->m_Size; i++) {
			cout << "姓名：" << abs->pesonArray[i].m_Name <<"\t";
			cout << "性别：" << (abs->pesonArray[i].m_Sex == 1 ?"男":"女") << "\t";
			cout << "年龄：" << abs->pesonArray[i].m_Age << "\t";
			cout << "电话：" << abs->pesonArray[i].m_Phone << "\t";
			cout << "住址：" << abs->pesonArray[i].m_Phone << endl;
		}
	}
	system("pause");//按任意键继续
	system("cls");//清屏
}

//检测联系人是否存在，如果存在，返回联系人所在数组中具体位置，不存在返回-1
// 参数1 通讯录 参数2 对比姓名
int isExist(Addressbooks* abs, string name)
{
	for (int i = 0; i < abs->m_Size; i++)
	{
		if (abs->pesonArray[i].m_Name == name)
		{
			return i;//找到了，返回这个人在数组中的下标
		}
	}
	return -1;//如果遍历结束都没有找到，返回-1
}

//3、删除指定联系人
void deletePerson(Addressbooks* abs)
{
	cout << "请输入您要删除的联系人" << endl;
	string name;
	cin >> name;
	
	//ret == -1 未查到
	//ret != -1 查到了
	int ret = isExist(abs, name);
	if (ret != -1)
	{
		//查找到人，要进行删除操作
		for (int i = ret; i < abs->m_Size; i++)
		{
			//数据前移
			abs->pesonArray[i] = abs->pesonArray[i + 1];
		}
		abs->m_Size--;//更新通讯录中的人员数
		cout << "删除成功" << endl;
	}
	else
	{
		cout << "查无此人" << endl;
	}
	system("pause");
	system("cls");
}

//4、查找指定联系人
void findPerson(Addressbooks* abs)
{
	cout << "请输入您要查找的联系人" << endl;
	string name;
	cin >> name;

	//判断指定的联系人是否存在通讯录中
	int ret = isExist(abs, name);
	if (ret != -1)//找到联系人
	{
		cout << "姓名：" << abs->pesonArray[ret].m_Name << "\t";
		cout << "性别：" << abs->pesonArray[ret].m_Sex << "\t";
		cout << "年龄：" << abs->pesonArray[ret].m_Age << "\t";
		cout << "电话：" << abs->pesonArray[ret].m_Phone << "\t";
		cout << "家庭住址：" << abs->pesonArray[ret].m_Addr <<endl;
	}
	else//未找到联系人
	{
		cout << "查无此人" << endl;
	}
	//任意键按下后 清屏
	system("pause");
	system("cls");
}

//5、修改指定联系人信息
void modifyPerson(Addressbooks* abs)
{
	cout << "请输入您要修改的联系人" << endl;
	string name;
	cin >> name;
	int ret = isExist(abs, name);

	if (ret != -1)//找到指定联系人
	{
		//姓名
		string name;
		cout << "请输入姓名" << endl;
		cin >> name;
		abs->pesonArray[ret].m_Name = name;

		//年龄
		cout << "请输入年龄" << endl;
		int age = 0;
		cin >> age;
		abs->pesonArray[ret].m_Age = age;

		//联系电话
		cout << "请输入联系电话" << endl;
		string phone;
		cin >> phone;
		abs->pesonArray[ret].m_Phone = phone;

		//家庭住址
		cout << "请输入家庭地址" << endl;
		string addr;
		cin >> addr;
		abs->pesonArray[ret].m_Addr = addr;
		cout << "修改成功" << endl;

	}
	else//未找到联系人
	{
		cout << "查无此人" << endl;
	}
	//按任意键清屏
	system("pause");
	system("cls");
}

//6、清空所有的联系人
void cleanPerson(Addressbooks* abs)
{
	abs->m_Size = 0;//将当前记录联系人数量置为0，做逻辑清空
	cout << "通讯录已清空" << endl;
	//按任意键后清屏
	system("pause");
	system("cls");
}




//菜单界面
void showMeanu() {
	cout << "***************************" << endl;
	cout << "****** 1、添加联系人 ******" << endl;
	cout << "****** 2、显示联系人 ******" << endl;
	cout << "****** 3、删除联系人 ******" << endl;
	cout << "****** 4、查找联系人 ******" << endl;
	cout << "****** 5、修改联系人 ******" << endl;
	cout << "****** 6、清空联系人 ******" << endl;
	cout << "****** 0、退出通讯录 ******" << endl;
	cout << "***************************" << endl;
}

int main()
{
	//创建通讯录结构体变量
	Addressbooks abs;
	//初始化通讯录中当前人员个数
	abs.m_Size = 0;
	int select = 0;//创建选择输入的变量
	//菜单调用
	while (true) {
		showMeanu();
		cin >> select;
		switch (select)
		{
		case 1://1、添加联系人
			addPerson(&abs);//利用地址传递，可以修饰实参
			break;
		case 2://2、显示联系人
			showPerson(&abs);
			break;
		case 3://3、删除联系人

		/*{
			cout << "请输入删除联系人姓名：" << endl;
			string name;
			cin >> name;
			if (isExist(&abs, name) == -1)
			{
				cout << "查无此人" << endl;
			}
			else
			{
				cout << "找到此人" << endl;
			}
		}*/

			deletePerson(&abs);
			break;
		case 4://4、查找联系人
			findPerson(&abs);
			break;
		case 5://5、修改联系人
			modifyPerson(&abs);
			break;
		case 6://6、清空联系人
			cleanPerson(&abs);
			break;
		case 0://0、退出通讯录
			cout << "欢迎下次使用" << endl;
			system("pause");
			return 0;
			break;
		}
	}
	
	system("pause");//按任意键继续,作用是程序结束后保持窗口打开
	return 0;
}
