#include<stdlib.h>
#include<stdio.h>
//定义二叉树结点结构
typedef struct TreeNode {
	int data;
	struct TreeNode* left, * right;
}TreeNode;
//创建新结点
TreeNode* createNode(int data) {
	TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
	newNode->data = data;
	newNode->right = newNode->left = NULL;
	return newNode;
}
//交换二叉树所有结点的左右子树
TreeNode* swapLeftRight(TreeNode* BT) {
	if (BT == NULL) {
		return NULL;
	}
	//递归交换左子树
	TreeNode* leftSwapped = swapLeftRight(BT->left);
	//递归交换右子树
	TreeNode* rightSwapped = swapLeftRight(BT->right);
	//交换当前结点的左右子树
	BT->left = rightSwapped;
	BT->right = leftSwapped;
	return BT;
}
//前序遍历二叉树
void preorderTraversal(TreeNode* root) {
	if (root != NULL) {
		printf("%d ", root->data);
		preorderTraversal(root->left);
		preorderTraversal(root->right);
	}
}
int main() {
	//创建原始二叉树
	TreeNode* root = createNode(1);
	    root->left = createNode(2);
	    root->right = createNode(3);
	    root->left->left = createNode(4);
	    root->left->right = createNode(5);
	
	    printf("原始二叉树前序遍历: ");
	    preorderTraversal(root);
	
	    TreeNode* newRoot = swapLeftRight(root);
	
	    printf("\n交换后的二叉树前序遍历: ");
	    preorderTraversal(newRoot);
	return 0;
}
