#include<stdio.h>
#include<stdlib.h>
//定义二叉树的节点结构
typedef struct TreeNode {
	int val;
	struct TreeNode* left,* right;
};
//创建新节点的函数
TreeNode* createNode(int val) {
	TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
	newNode->val = val;
	newNode->left = NULL;
	newNode->right = NULL;
	return newNode;
}
//计算二叉树总结点的函数
int countNodes(TreeNode* root) {
	if (root == NULL) {
		return 0;
	}
	int leftCount = countNodes(root->left);
	int rightCount = countNodes(root->right);
	return 1 + leftCount + rightCount;
}
//释放二叉树内存的函数
void freeTree(TreeNode* root) {
	if (root != NULL) {
		freeTree(root->left);
		freeTree(root->right);
		free(root);
	}
}

int main() {
	//构建一个简单的二叉树
	TreeNode* root = createNode(1);
	root->left = createNode(2);
	root->right = createNode(3);
	root->left->left = createNode(4);
	root->left->right = createNode(5);
	int totalNodes = countNodes(root);
	printf("二叉树的总结点数为：%d\n", totalNodes);
	//释放二叉树占用的内存
	freeTree(root);
	return 0;
}
